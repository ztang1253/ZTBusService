<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="address" xml:space="preserve">
    <value>Street Address</value>
  </data>
  <data name="ChangeLanguage" xml:space="preserve">
    <value>Change Language</value>
  </data>
  <data name="city" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact Us</value>
  </data>
  <data name="countryCode" xml:space="preserve">
    <value>Country Code</value>
  </data>
  <data name="CreateNewX" xml:space="preserve">
    <value>Create New {0}</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="exceptionTryingToAddX" xml:space="preserve">
    <value>exception trying to add new {0}:</value>
  </data>
  <data name="FieldMustBeDate" xml:space="preserve">
    <value>field '{0}' must be a date</value>
  </data>
  <data name="FieldMustBeNumeric" xml:space="preserve">
    <value>field '{0}' must be a number</value>
  </data>
  <data name="firstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="lastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="phonePattern" xml:space="preserve">
    <value>Phone Pattern</value>
  </data>
  <data name="postalCode" xml:space="preserve">
    <value>Postal Code</value>
  </data>
  <data name="postalPattern" xml:space="preserve">
    <value>Postal Pattern</value>
  </data>
  <data name="PropertyValueInvalid" xml:space="preserve">
    <value>'{0}' is not a valid value for '{1}'</value>
  </data>
  <data name="PropertyValueRequired" xml:space="preserve">
    <value>a value is required for '{0}'</value>
  </data>
  <data name="province" xml:space="preserve">
    <value>Province</value>
  </data>
  <data name="provinceCode" xml:space="preserve">
    <value>Province Code</value>
  </data>
  <data name="provinceStateLabel" xml:space="preserve">
    <value>Province Label</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>{0} cannot be empty or just spaces</value>
  </data>
  <data name="ReturnToList" xml:space="preserve">
    <value>Return to List</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="street" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="userName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="XcannotBeDerivedFromXorX" xml:space="preserve">
    <value>{0} cannot be derived from {1} or {2}</value>
  </data>
  <data name="XisNotOnFile" xml:space="preserve">
    <value>{0} '{1}' is not on file</value>
  </data>
  <data name="XRecordCreated" xml:space="preserve">
    <value>{0} record created</value>
  </data>
  <data name="dateHired" xml:space="preserve">
    <value>Date Hired</value>
  </data>
  <data name="Driver" xml:space="preserve">
    <value>Driver</value>
  </data>
  <data name="driverLowerCase" xml:space="preserve">
    <value>driver</value>
  </data>
  <data name="fullNameDriver" xml:space="preserve">
    <value>Driver Name</value>
  </data>
  <data name="homePhone" xml:space="preserve">
    <value>Home Phone</value>
  </data>
  <data name="id" xml:space="preserve">
    <value>Driver Id</value>
  </data>
  <data name="NewXRecordAdded" xml:space="preserve">
    <value> New {0} record added. </value>
  </data>
  <data name="pleaseSelect" xml:space="preserve">
    <value>--- Please select ---</value>
  </data>
  <data name="TempMessageDeleteSuccessIdName" xml:space="preserve">
    <value>The driver (id: {0}, full name: {1}) has been deleted. </value>
  </data>
  <data name="TempMessageErrorOnDeleteIdName" xml:space="preserve">
    <value>Fail to delete the driver (id: {0}, full name: {1}) : </value>
  </data>
  <data name="TempMessageErrorOnEditIdName" xml:space="preserve">
    <value>Fail to update information for the driver (id: {0}, full name: {1}) : </value>
  </data>
  <data name="TempMessageUpdateSuccessIdName" xml:space="preserve">
    <value>The information for this driver (id: {0}, full name: {1}) has been updated.</value>
  </data>
  <data name="TempMessageXisX" xml:space="preserve">
    <value> {0} is {1}. </value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="streetAddress" xml:space="preserve">
    <value>Street Address</value>
  </data>
  <data name="titleAddNewX" xml:space="preserve">
    <value>Add New {0}</value>
  </data>
  <data name="workPhone" xml:space="preserve">
    <value>Work Phone</value>
  </data>
  <data name="LogIn" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Section" xml:space="preserve">
    <value>Section</value>
  </data>
  <data name="XCannotBeBlanks" xml:space="preserve">
    <value>{0} cannot be just blanks/spaces.</value>
  </data>
  <data name="XCannotBeFuture" xml:space="preserve">
    <value>{0} cannot be in the future.</value>
  </data>
  <data name="XIsInvalidDate" xml:space="preserve">
    <value>{0} is not a valid date formate : 2005-12-31</value>
  </data>
  <data name="XIsInvalidPhoneNumber" xml:space="preserve">
    <value>{0} is not a valid phone number. Please format like 222-222-2222.</value>
  </data>
  <data name="XIsInvalidPostal" xml:space="preserve">
    <value>{0} is not a valid Canadian postal pattern: A3A 3A3</value>
  </data>
  <data name="ZhenzhenBusService" xml:space="preserve">
    <value>Zhenzhen's Bus Service</value>
  </data>
  <data name="ErrorOnValidatingX" xml:space="preserve">
    <value>Error on validating {0} : </value>
  </data>
  <data name="WrongProvincePattern" xml:space="preserve">
    <value>Province Code is not a valid Canadian province code.</value>
  </data>
  <data name="XCanOnlyBe2EnglishLetters" xml:space="preserve">
    <value>{0} should only contain English alphabet letters and be only 2 letters long.</value>
  </data>
  <data name="DataTypeDateTime" xml:space="preserve">
    <value>The field {0} must be a date.</value>
  </data>
  <data name="StringLength" xml:space="preserve">
    <value>The length of {0} should be from 2 to 50.</value>
  </data>
</root>